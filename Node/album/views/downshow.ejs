<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <script src="https://cdn.bootcss.com/jquery/3.2.1/jquery.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
        crossorigin="anonymous"></script>
    <script src="/js/bootstrap.min.js"></script>
    <script src="/js/axios.min.js"></script>
    <style>
        .nav {
            margin-bottom: 20px;
        }
        .container {
            margin-top: 30px;
        }
        .buffer_images {
            width: 1000px;
            height: 600px;
        }
    </style>
</head>

<body>
    <ul class="nav">
        <li class="nav-item">
            <a class="nav-link active" href="/home">Home</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/downloadshow">下载展示</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/up">上传</a>
        </li>
    </ul>
    <div class="btns_file_download">
        <a href="/downloadonlyfilebuffer">下载文件(返回Buffer),直接使用a标签</a>
        <a href="/images/a.jpg" download="a.jpg">下载文件(url),直接使用a标签</a>
        <button type="button" class="btn btn-primary bufferBtn">下载文件(返回Buffer)</button>
        <button type="button" class="btn btn-primary urlBtn">下载文件(返回Url)</button>
        <button type="button" class="btn btn-primary urlShowBtn">显示文件(返回Url)</button>
        <button type="button" class="btn btn-primary bufferShowBtn">显示文件(返回Buffer)</button>
    </div>
    <div class="container">
        <div class="row">
            <img src="" alt="" class="img-rounded buffer_images">
        </div>
    </div>
    <script>
        let bufferBtn = document.querySelector('.bufferBtn');
        let urlBtn = document.querySelector('.urlBtn');
        let urlShowBtn = document.querySelector('.urlShowBtn');
        let bufferShowBtn = document.querySelector('.bufferShowBtn');
        let buffer_images = document.querySelector('.buffer_images');
        bufferBtn.onclick = function () {
            //方案1
            /* let a = document.createElement('a');
            a.href = '/downloadonlyfilebuffer';
            a.click();  */
                  
            //方案2
            axios.get('/downloadonlyfilebuffer', {
                responseType: 'blob'    //也可以是arraybuffer， 使用new Blob([response.data])来转为blob
            })
            .then(function (response) {
                let url = URL.createObjectURL(response.data);    //responseType: 'blob'
                location.href = url;
            })
            .catch(function (error) {
                console.log(error);
            });
            
            //方案3 
            /* axios.get('/downloadonlyfilebuffer', {
                responseType: 'blob'  //使用arraybuffer类型，转为blob。使用FileReader下载会报错，img.src显示不会
            })
            .then(function (response) {
                let reader = new FileReader();
                reader.readAsDataURL(response.data);
                reader.onload = function() {
                    location.href = this.result;        
                }   
            })
            .catch(function (error) {
                console.log(error);
            }); */
        }
        urlBtn.onclick = function () {
            axios.get('/downloadonlyfileurl')
                .then(function (response) {
                    location.href = response.data;
                })
                .catch(function (error) {
                    console.log(error);
                });
        }
        urlShowBtn.onclick = function () {
            buffer_images.src = '/images/b.jpg';
        }
        bufferShowBtn.onclick = function () {
            axios.get('/downloadonlyfilebuffer',  {
                    // responseType: 'arraybuffer'
                    responseType: 'blob'
                })
                .then(function (response) {
                    console.log(response.data)
                    // let byteArray = new Uint8Array(response.data);
                    // console.log(byteArray);
                    
                    // 方案1： 返回的是blob类型， createObjectURL
                    let url = URL.createObjectURL(response.data);    //responseType: 'blob'
                    buffer_images.src = url;
                    
                    //方案2： 返回的是arraybuffer类型，先转成blob，再createObjectURL
                    /* let blob = new Blob([response.data]);   //responseType: 'arraybuffer'或者'blob'
                    let url = URL.createObjectURL(blob);
                    buffer_images.src = url; */

                    //方案3： 返回blob类型，使用FileReader， 也可以返回arraybuffer, 这是就要先转为blob
                    /* let reader = new FileReader();        
                    reader.readAsDataURL(response.data);  //responseType: 'blob'
                    reader.onload = function(f) {
                        buffer_images.src = this.result;
                    } */
                })
                .catch(function (error) {
                    console.log(error);
                });
            
            // let xhr = new XMLHttpRequest();
            // xhr.open('GET', '/downloadonlyfilebuffer', true);
            // // xhr.responseType = 'blob';
            // xhr.onload = function() {
            //     if(xhr.status === 200) {
            //         console.log(xhr.response)
            //     }
            // }
            // xhr.send();
        }
    </script>
</body>

</html>